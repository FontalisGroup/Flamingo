//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `icomoon.ttf`.
    static let icomoonTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "icomoon", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "icomoon", withExtension: "ttf")`
    static func icomoonTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icomoonTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `icomoon`.
    static let icomoon = Rswift.FontResource(fontName: "icomoon")
    
    /// `UIFont(name: "icomoon", size: ...)`
    static func icomoon(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: icomoon, size: size)
    }
    
    static func validate() throws {
      if R.font.icomoon(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'icomoon' could not be loaded, is 'icomoon.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle")
    /// Image `color_gradient`.
    static let color_gradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "color_gradient")
    /// Image `flamingo-back`.
    static let flamingoBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "flamingo-back")
    
    /// `UIImage(named: "circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "color_gradient", bundle: ..., traitCollection: ...)`
    static func color_gradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.color_gradient, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flamingo-back", bundle: ..., traitCollection: ...)`
    static func flamingoBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flamingoBack, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ArticleDefaultCell`.
    static let articleDefaultCell: Rswift.ReuseIdentifier<ArticleDefaultCell> = Rswift.ReuseIdentifier(identifier: "ArticleDefaultCell")
    /// Reuse identifier `CommentCell`.
    static let commentCell: Rswift.ReuseIdentifier<CommentCell> = Rswift.ReuseIdentifier(identifier: "CommentCell")
    /// Reuse identifier `fake`.
    static let fake: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "fake")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ArticleListVC`, and contains static references to 2 segues.
    struct articleListVC {
      /// Segue identifier `comments`.
      static let comments: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ArticleListVC, ArticleCommentsVC> = Rswift.StoryboardSegueIdentifier(identifier: "comments")
      /// Segue identifier `popup`.
      static let popup: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ArticleListVC, DeepPressPopupVC> = Rswift.StoryboardSegueIdentifier(identifier: "popup")
      
      /// Optionally returns a typed version of segue `comments`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func comments(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ArticleListVC, ArticleCommentsVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.articleListVC.comments, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `popup`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func popup(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ArticleListVC, DeepPressPopupVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.articleListVC.popup, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Popup`.
    static let popup = _R.storyboard.popup()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Popup", bundle: ...)`
    static func popup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.popup)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      /// en translation: Anonymous
      /// 
      /// Locales: en
      static let articleCommentsCommentAnonymous = Rswift.StringResource(key: "ArticleComments/Comment/Anonymous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Couldn't load comments :(
      /// 
      /// Locales: en
      static let articleCommentsLoadingFailed = Rswift.StringResource(key: "ArticleComments/LoadingFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Couldn't load feed :(
      /// 
      /// Locales: en
      static let articlesListLoadingFailed = Rswift.StringResource(key: "ArticlesList/LoadingFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Loading comments...
      /// 
      /// Locales: en
      static let articleCommentsLoading = Rswift.StringResource(key: "ArticleComments/Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Nothing to show
      /// 
      /// Locales: en
      static let commonNothingToShow = Rswift.StringResource(key: "Common/NothingToShow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en
      static let commonOk = Rswift.StringResource(key: "Common/Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Something went wrong
      /// 
      /// Locales: en
      static let commonSomethingWentWrong = Rswift.StringResource(key: "Common/SomethingWentWrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Anonymous
      /// 
      /// Locales: en
      static func articleCommentsCommentAnonymous(_: Void = ()) -> String {
        return NSLocalizedString("ArticleComments/Comment/Anonymous", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Couldn't load comments :(
      /// 
      /// Locales: en
      static func articleCommentsLoadingFailed(_: Void = ()) -> String {
        return NSLocalizedString("ArticleComments/LoadingFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Couldn't load feed :(
      /// 
      /// Locales: en
      static func articlesListLoadingFailed(_: Void = ()) -> String {
        return NSLocalizedString("ArticlesList/LoadingFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading comments...
      /// 
      /// Locales: en
      static func articleCommentsLoading(_: Void = ()) -> String {
        return NSLocalizedString("ArticleComments/Loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nothing to show
      /// 
      /// Locales: en
      static func commonNothingToShow(_: Void = ()) -> String {
        return NSLocalizedString("Common/NothingToShow", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en
      static func commonOk(_: Void = ()) -> String {
        return NSLocalizedString("Common/Ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong
      /// 
      /// Locales: en
      static func commonSomethingWentWrong(_: Void = ()) -> String {
        return NSLocalizedString("Common/SomethingWentWrong", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try popup.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = FlamingoNVC
      
      let articleCommentsVC = StoryboardViewControllerResource<ArticleCommentsVC>(identifier: "ArticleCommentsVC")
      let articleListVC = StoryboardViewControllerResource<ArticleListVC>(identifier: "ArticleListVC")
      let bundle = R.hostingBundle
      let name = "Main"
      
      func articleCommentsVC(_: Void = ()) -> ArticleCommentsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articleCommentsVC)
      }
      
      func articleListVC(_: Void = ()) -> ArticleListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articleListVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "circle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "color_gradient") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'color_gradient' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().articleCommentsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articleCommentsVC' could not be loaded from storyboard 'Main' as 'ArticleCommentsVC'.") }
        if _R.storyboard.main().articleListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articleListVC' could not be loaded from storyboard 'Main' as 'ArticleListVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct popup: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DeepPressPopupVC
      
      let bundle = R.hostingBundle
      let deepPressPopupVC = StoryboardViewControllerResource<DeepPressPopupVC>(identifier: "DeepPressPopupVC")
      let name = "Popup"
      
      func deepPressPopupVC(_: Void = ()) -> DeepPressPopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deepPressPopupVC)
      }
      
      static func validate() throws {
        if _R.storyboard.popup().deepPressPopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deepPressPopupVC' could not be loaded from storyboard 'Popup' as 'DeepPressPopupVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
